// src/app/api/create-amo-lead/route.ts
import { NextResponse } from 'next/server';
import axios from 'axios';
import { getSupabaseAdmin } from '@/lib/supabaseAdmin';
import nodemailer from 'nodemailer'; // <--- –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç Nodemailer

// ‚Äî‚Äî‚Äî VERIFY ENV VARS ‚Äî‚Äî‚Äî
if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.error('[setup error] SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
}

// ‚Äî‚Äî‚Äî Types ‚Äî‚Äî‚Äî
interface BookingDetails {
  price: number;
  [key: string]: unknown;
}

// === Get / Save Tokens ====================================
async function getTokens() {
  const supabase = getSupabaseAdmin()
  const { data, error } = await supabase
    .from('tokens')
    .select('access_token, refresh_token')
    .eq('id', 'amocrm')
    .single();

  if (error) throw new Error(`Supabase error: ${error.message}`);
  if (!data) throw new Error('–°—Ç—Ä–æ–∫–∞ —Ç–æ–∫–µ–Ω–∞ id="amocrm" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  return { accessToken: data.access_token, refreshToken: data.refresh_token };
}

async function saveTokens(access: string, refresh: string) {
  const supabase = getSupabaseAdmin()
  const { error } = await supabase
    .from('tokens')
    .update({ access_token: access, refresh_token: refresh, updated_at: new Date().toISOString() })
    .eq('id', 'amocrm');
  if (error) throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Supabase: ${error.message}`);
}

// === OAuth Refresh ========================================
async function refreshAccessToken(refreshToken: string): Promise<string> {
  const { data } = await axios.post(
    `${process.env.AMOCRM_SUBDOMAIN}/oauth2/access_token`,
    {
      grant_type: 'refresh_token',
      client_id:   process.env.AMOCRM_CLIENT_ID,
      client_secret: process.env.AMOCRM_CLIENT_SECRET,
      refresh_token:  refreshToken,
      redirect_uri:   process.env.AMOCRM_REDIRECT_URI
    }
  );
  await saveTokens(data.access_token, data.refresh_token);
  return data.access_token;
}

// === Lead / Contact =======================================
async function sendLeadRequest(
  token: string,
  apiUrl: string,
  carName: string,
  userName: string,
  userPhone: string,
  booking: BookingDetails
) {
  const headers = { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' };

  let contactId: number | null = null;
  try {
    const { data } = await axios.get(`${apiUrl}/contacts`, { headers, params: { query: userPhone }});
    if (data?._embedded?.contacts?.[0]) {
      contactId = data._embedded.contacts[0].id;
    } else {
      const createRes = await axios.post(
        `${apiUrl}/contacts`,
        [{ name: userName, custom_fields_values: [{ field_code: 'PHONE', values: [{ value: userPhone, enum_code: 'WORK' }] }] }],
        { headers }
      );
      contactId = createRes.data._embedded.contacts[0].id;
    }
  } catch (err) {
    console.warn('[sendLead] –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', err);
  }

  const lead = [{
    name: `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞: ${carName} - ${userName}`,
    price: booking.price,
    _embedded: { contacts: contactId ? [{ id: contactId }] : [] }
  }];

  return axios.post(`${apiUrl}/leads`, lead, { headers });
}

// <--- –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Email
async function sendEmail(carName: string, userName: string, userPhone: string, bookingDetails: BookingDetails) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è email
  if (!process.env.EMAIL_SERVER_HOST || !process.env.EMAIL_SERVER_PORT ||
      !process.env.EMAIL_SERVER_USER || !process.env.EMAIL_SERVER_PASSWORD ||
      !process.env.EMAIL_FROM || !process.env.EMAIL_TO) {
    console.error('Email-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é. Email –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
    return;
  }

  const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_SERVER_HOST,
    port: parseInt(process.env.EMAIL_SERVER_PORT, 10), // –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
    secure: process.env.EMAIL_SERVER_PORT === '465', // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true, –µ—Å–ª–∏ –ø–æ—Ä—Ç 465 (SSL), –∏–Ω–∞—á–µ false (TLS)
    auth: {
      user: process.env.EMAIL_SERVER_USER,
      pass: process.env.EMAIL_SERVER_PASSWORD,
    },
  });

  const mailOptions = {
    from: process.env.EMAIL_FROM,
    to: process.env.EMAIL_TO,
    subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ TopCar: ${carName}`, // –¢–µ–º–∞ –ø–∏—Å—å–º–∞
    html: `
      <p>–ü—Ä–∏–≤–µ—Ç!</p>
      <p>–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ TopCar:</p>
      <ul>
        <li>**–ê–≤—Ç–æ–º–æ–±–∏–ª—å**: <strong>${carName}</strong></li>
        <li>**–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞**: <strong>${userName}</strong></li>
        <li>**–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞**: <strong>${userPhone}</strong></li>
        <li>**–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**:
          <ul>
            <li>–¶–µ–Ω–∞: ${bookingDetails.price}</li>
            ${Object.entries(bookingDetails).map(([key, value]) => {
              if (key !== 'price') { // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ 'price', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ
                return `<li>${key}: ${JSON.stringify(value)}</li>`; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON.stringify –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤/–º–∞—Å—Å–∏–≤–æ–≤
              }
              return '';
            }).join('')}
          </ul>
        </li>
      </ul>
      <p>–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —Ç–∞–∫–∂–µ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ AmoCRM.</p>
      <p>–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,</p>
      <p>–í–∞—à —Å–∞–π—Ç TopCar.</p>
    `,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log('Email —Å –∑–∞—è–≤–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
  } catch (emailError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', emailError);
  }
}
// –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –ó–ê–ö–û–ù–ß–ò–õ–°–Ø ^^^

// === POST handler =========================================
export async function POST(request: Request) {
  try {
    const { carName, userName, userPhone, bookingDetails } = await request.json();

    if (!carName || !userName || !userPhone || !bookingDetails) {
      return NextResponse.json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' }, { status: 400 });
    }

    const apiUrl = `${process.env.AMOCRM_SUBDOMAIN}/api/v4`;
    const { accessToken: initialToken, refreshToken } = await getTokens();
    let accessToken = initialToken;

    try {
      const res = await sendLeadRequest(accessToken, apiUrl, carName, userName, userPhone, bookingDetails);
      console.log('–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ AmoCRM:', res.data?._embedded?.leads?.[0]?.id);

      // <--- –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò EMAIL –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ò –í AMOCRM
      await sendEmail(carName, userName, userPhone, bookingDetails);

      return NextResponse.json({ message: '–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', leadId: res.data?._embedded?.leads?.[0]?.id }, { status: 200 });

    } catch (err) {
      if (axios.isAxiosError(err) && err.response?.status === 401) {
        accessToken = await refreshAccessToken(refreshToken);
        const retry = await sendLeadRequest(accessToken, apiUrl, carName, userName, userPhone, bookingDetails);
        console.log('–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ AmoCRM:', retry.data?._embedded?.leads?.[0]?.id);
        // <--- –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò EMAIL –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ò –í AMOCRM (–ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê)
        await sendEmail(carName, userName, userPhone, bookingDetails);
        return NextResponse.json({ message: '–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', leadId: retry.data?._embedded?.leads?.[0]?.id }, { status: 200 });
      }
      throw err;
    }

  } catch (err) {
    const msg = err instanceof Error ? err.message : String(err);
    console.error('üî• –†–ï–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê:', msg);
      return NextResponse.json({ message: msg }, { status: 500 });
    }
  }